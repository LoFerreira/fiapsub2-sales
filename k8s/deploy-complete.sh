#!/bin/bash

echo "üöÄ Deploy FIAP SUB2 Sales no Kubernetes"
echo "=================================="

# Verificar se estamos no diret√≥rio correto
if [ ! -f "k8s/deployment.yaml" ]; then
    echo "‚ùå Arquivo k8s/deployment.yaml n√£o encontrado!"
    echo "Execute este script na raiz do projeto"
    exit 1
fi

# Verificar se o Minikube est√° rodando
if ! minikube status > /dev/null 2>&1; then
    echo "üîÑ Iniciando Minikube..."
    minikube start
fi

# Configurar Docker para usar o Docker do Minikube
echo "üê≥ Configurando Docker environment..."
eval $(minikube docker-env)

# Build da imagem no Docker do Minikube
echo "üèóÔ∏è  Fazendo build da imagem..."
docker build -t fiapsub2-sales:latest .

# Aplicar ConfigMaps
echo "‚öôÔ∏è  Aplicando ConfigMaps..."
kubectl apply -f k8s/configmap.yaml

# Subir fiapsub2-core (usando imagem p√∫blica) pelo repo do sales
echo "üß© Preparando fiapsub2-core (imagem p√∫blica) ..."
# Secret do Firebase para o core
if ! kubectl get secret firebase-adminsdk > /dev/null 2>&1; then
    echo "üîê Criando secret do Firebase para o core..."
    if [ -f "fiapsub2-firebase-sdk.json" ]; then
        kubectl create secret generic firebase-adminsdk \
          --from-file=fiapsub2-firebase-sdk.json=./fiapsub2-firebase-sdk.json
    else
        echo "‚ùå Arquivo fiapsub2-firebase-sdk.json n√£o encontrado na raiz do fiapsub2-sales."
        echo "   Coloque o JSON do Firebase aqui ou crie manualmente a secret firebase-adminsdk."
        echo "   Prosseguindo sem criar a secret pode falhar o core."
    fi
fi
echo "üöÄ Aplicando Core Service/Deployment..."
kubectl apply -f k8s/core-service.yaml
kubectl apply -f k8s/core-deployment.yaml

# Criar Secret do MongoDB se n√£o existir
if ! kubectl get secret mongodb-secret > /dev/null 2>&1; then
    echo "üîê Criando secret do MongoDB..."
    # Tenta usar vari√°vel de ambiente; caso n√£o tenha, tenta carregar do .env
        if [ -z "$MONGODB_URI" ]; then
                if [ -f ".env" ]; then
                        echo "üìÑ Carregando .env"
                        set -a
                        # shellcheck disable=SC1091
                        . ./.env
                        set +a
                        # Fallback: aceitar chaves em min√∫sculas
                        if [ -z "$MONGODB_URI" ] && [ -n "$mongodb_uri" ]; then
                            export MONGODB_URI="$mongodb_uri"
                        fi
                        if [ -z "$MONGODB_DB_NAME" ] && [ -n "$mongodb_db_name" ]; then
                            export MONGODB_DB_NAME="$mongodb_db_name"
                        fi
                            # Fallback extra: parse direto do .env em caso de incompatibilidade de shell
                            if [ -z "$MONGODB_URI" ]; then
                                parsed_uri=$(grep -E '^(MONGODB_URI|mongodb_uri)=' .env | tail -n1 | cut -d= -f2- | tr -d '\r')
                                # remove aspas simples/duplas se houver
                                parsed_uri="${parsed_uri%\"}"; parsed_uri="${parsed_uri#\"}"
                                parsed_uri="${parsed_uri%\'}"; parsed_uri="${parsed_uri#\'}"
                                if [ -n "$parsed_uri" ]; then export MONGODB_URI="$parsed_uri"; fi
                            fi
                            if [ -z "$MONGODB_DB_NAME" ]; then
                                parsed_db=$(grep -E '^(MONGODB_DB_NAME|mongodb_db_name)=' .env | tail -n1 | cut -d= -f2- | tr -d '\r')
                                parsed_db="${parsed_db%\"}"; parsed_db="${parsed_db#\"}"
                                parsed_db="${parsed_db%\'}"; parsed_db="${parsed_db#\'}"
                                if [ -n "$parsed_db" ]; then export MONGODB_DB_NAME="$parsed_db"; fi
                            fi
                fi
        fi
    if [ -z "$MONGODB_URI" ]; then
        echo "‚ùå MONGODB_URI n√£o definida."
        echo "Defina a vari√°vel de ambiente MONGODB_URI ou inclua no arquivo .env antes de executar."
        exit 1
    fi
    kubectl create secret generic mongodb-secret \
      --from-literal=MONGODB_URI="$MONGODB_URI"
else
    echo "‚úÖ Secret mongodb-secret j√° existe"
fi

# Aplicar Deployment
echo "üöÄ Aplicando Deployment..."
kubectl apply -f k8s/deployment.yaml
kubectl apply -f k8s/core-deployment.yaml

# Aplicar Services
echo "üåê Aplicando Services..."
kubectl apply -f k8s/service.yaml
kubectl apply -f k8s/core-service.yaml

# Aguardar pods ficarem prontos
echo "‚è≥ Aguardando pods ficarem prontos..."
kubectl wait --for=condition=ready pod -l app=fiapsub2-sales --timeout=120s

# Mostrar status
echo ""
echo "üìä Status do Deploy:"
echo "==================="
kubectl get pods -l app=fiapsub2-sales
kubectl get pods -l app=fiapsub2
echo ""
kubectl get services
echo ""

# Instru√ß√µes finais
echo "üéâ Deploy conclu√≠do com sucesso!"
echo ""
echo "üì± Para acessar a aplica√ß√£o:"
echo "   kubectl port-forward service/fiapsub2-sales-service 3001:80"
echo ""
echo "üåê URLs dispon√≠veis:"
echo "   ‚Ä¢ Health Check: http://localhost:3001/health"
echo "   ‚Ä¢ API Docs:     http://localhost:3001/api-docs"
echo "   ‚Ä¢ Vehicles API: http://localhost:3001/vehicles"
echo ""
echo "üîç Para ver logs:"
echo "   kubectl logs -l app=fiapsub2 -f"
echo ""
echo "üßπ Para limpar tudo:"
echo "   kubectl delete -f k8s/"
